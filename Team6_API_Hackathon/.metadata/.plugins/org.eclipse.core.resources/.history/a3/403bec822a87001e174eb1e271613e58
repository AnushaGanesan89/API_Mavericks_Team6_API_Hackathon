package api.Actions;


import static io.restassured.RestAssured.given;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.javafaker.Faker;

import api.CRUDOperations.*;
import api.Payloads.*;
import api.Utilities.Loggerload;
import enums.Env_Var;
import api.GlobalVariables.*;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class Patient_TC {

	Response response;
	String extractresponse;
	JsonPath jsonPathEvaluator;
	Faker faker;
	
	//Post Request
	public void TestPostPatient(String Allergy,String FoodCategory) throws ParseException, JsonProcessingException
	{
		Patient_POJO patientpayload=new Patient_POJO();
		faker=new Faker();
		patientpayload.setFirstName(faker.name().firstName());
		patientpayload.setLastName(faker.name().lastName());
		patientpayload.setContactNumber(faker.number().numberBetween(1000000000L, 9999999999L));
		patientpayload.setEmail(faker.internet().emailAddress());
		patientpayload.setAllergy(Allergy);
		patientpayload.setFoodCategory(FoodCategory);
		LocalDateTime currentDate = LocalDateTime.now();
		String DateOfBirth= currentDate.minusYears(20).toString();
		patientpayload.setDateOfBirth(DateOfBirth);
		response= Patient_CRUD.Patient_Creation(patientpayload);
		extractresponse=response.then().log().all().extract().response().asString();
		JsonPath js= new JsonPath(extractresponse);
		String email= js.getString("Email");
		int pid= js.getInt("patientId");
		System.out.println("email is" +email);
		System.out.println("pid is" +pid);
		
		Env_Var.Email=email;
		Env_Var.patientId=pid;
		
		
		
	}
	
public int verify_post_patient_status() {
		
		int code;
		code=response.getStatusCode();
		return code;

	}
//Get All Patient
public void Get_All_Patient()
{
	
	response= Patient_CRUD.getAll_Patient();
	response.then();
}

public int verify_get_patient_status() {
	
	int code;
	code=response.getStatusCode();
	return code;

}
//Get Patient Reports Using Patient Id
public void Get_PatientDetails_UsingID(int id)
{
	
		
		response= Patient_CRUD.get_Using_PatientID(id);
		extractresponse=response.then().log().all().extract().response().asString();
		JsonPath js= new JsonPath(extractresponse);
		String fileId= js.getString("fileId");
		System.out.println("File id is:" +fileId);
		Env_Var.fileid=fileId;
		

	}
public int verify_get_patient_usingid_status() {
	
	int code;
	code=response.getStatusCode();
	return code;

}
//Retrieve Patient Files using FileId
public void Get_PatientFiles_UsingFileID(String id)
{
	
		
		response= Patient_CRUD.get_Patient_Using_FileID(id);
		response.then().log().all();
		
		

	}

//Update Patient Details

public void Update_Patient(String Allergy) throws ParseException, JsonProcessingException
{
	Patient_POJO patientpayload=new Patient_POJO();
	faker=new Faker();
	
	patientpayload.setLastName(faker.name().lastName());
	patientpayload.setContactNumber(faker.number().numberBetween(1000000000L, 9999999999L));
	patientpayload.setAllergy(Allergy);
	response= Patient_CRUD.Update_Patient_Details(Env_Var.patientId,patientpayload);
	response.then().log().all();

	
}

public int verify_put_patient_status() {
	
	int code;
	code=response.getStatusCode();
	return code;

}

//Patient_Deletion





}
